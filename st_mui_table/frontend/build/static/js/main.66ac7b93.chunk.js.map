{"version":3,"sources":["st_mui_table.tsx","index.tsx"],"names":["withStreamlitConnection","props","content","customCss","enablePagination","size","padding","showHeaders","paginationSizes","stickyHeader","paperStyle","detailColumns","detailColNum","detailsHeader","showIndex","maxHeight","minHeight","paginationLabel","showFirstButtonPagination","showLastButtonPagination","args","state","setState","React","useState","page","rowsPerPage","useEffect","prev","expanded","setExpanded","startRow","endRow","currentPageContent","slice","shouldUpdateHeight","setShouldUpdateHeight","tableRef","current","observer","ResizeObserver","Streamlit","setFrameHeight","observe","disconnect","tableStyle","concat","undefined","overflow","useRef","createElement","Fragment","dangerouslySetInnerHTML","__html","Paper","sx","TableContainer","ref","style","Table","aria-label","TableHead","TableRow","TableCell","length","Object","keys","filter","header","includes","map","i","key","String","TableBody","row","rowIndex","isExpanded","hover","role","tabIndex","IconButton","onClick","event","stopPropagation","currentIndex","indexOf","newExpanded","push","splice","handleExpandClick","ExpandLessIcon","ExpandMoreIcon","entries","_ref","value","wordWrap","whiteSpace","overflowWrap","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","margin","Typography","variant","gutterBottom","component","originalArray","chunkSize","array","results","chunkArray","chunk","additionalColumn","TablePagination","rowsPerPageOptions","label","count","SelectProps","inputProps","native","onPageChange","handleChangePage","newPage","onRowsPerPageChange","persist","target","labelRowsPerPage","showFirstButton","showLastButton","ReactDOM","render","StrictMode","TableComponent","document","getElementById"],"mappings":"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","file":"static/js/main.66ac7b93.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { Table, TableBody, TableCell, TableContainer, TablePagination, TableRow, Paper, TableHead, IconButton, Typography } from '@mui/material';\nimport Collapse from '@mui/material/Collapse';\nimport Box from '@mui/material/Box';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\n\n\ninterface TableState {\n    page: number;\n    rowsPerPage: number;\n}\n\nfunction chunkArray<T>(originalArray: T[], chunkSize: number): T[][] {\n  const array = [...originalArray];  // Create a copy of the original array\n  const results = [];\n  while (array.length) {\n    results.push(array.splice(0, chunkSize));\n  }\n  return results;\n}\n\nconst TableComponent = (props: ComponentProps) => {\n\n  const { content, customCss, enablePagination, size, padding, showHeaders, paginationSizes, stickyHeader, paperStyle, detailColumns,detailColNum,\n    detailsHeader,showIndex, maxHeight,minHeight, paginationLabel, showFirstButtonPagination, showLastButtonPagination   } = props.args;  // Python Args\n\n  const [state, setState] = React.useState<TableState>({\n    page: 0,\n    rowsPerPage: paginationSizes[0],  // Set the default rowsPerPage to the first value in the list of options\n  })\n\n  //if pagination is disabled, set rowsPerPage to -1\n  useEffect(() => {\n    if (!enablePagination) {\n      setState((prev) => ({ ...prev, rowsPerPage: -1 }));\n    }\n    else {\n      setState((prev) => ({ ...prev, rowsPerPage: paginationSizes[0] }));\n    }\n  }, [enablePagination]);\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setState((prev) => ({ ...prev, page: newPage }));\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();  // Remove the event from the pool\n    setState((prev) => ({ ...prev, rowsPerPage: +event.target.value, page: 0 }));\n  };\n\n  const [expanded, setExpanded] = React.useState<number[]>([]);\n\nconst startRow = state.page * state.rowsPerPage;\nconst endRow = startRow + state.rowsPerPage;\nconst currentPageContent = content.slice(startRow, endRow);\n\nconst [shouldUpdateHeight, setShouldUpdateHeight] = React.useState(false);\n\n\nconst handleExpandClick = (i: number) => {\n  const currentIndex = expanded.indexOf(i);\n  const newExpanded = [...expanded];\n\n  if (currentIndex === -1) {\n    newExpanded.push(i);\n  } else {\n    newExpanded.splice(currentIndex, 1);\n  }\n\n  setExpanded(newExpanded);\n  setShouldUpdateHeight(!shouldUpdateHeight);  // toggle shouldUpdateHeight state\n};\n\nuseEffect(() => {\n  if (tableRef.current) {\n    const observer = new ResizeObserver(() => {\n      Streamlit.setFrameHeight();\n    });\n\n    observer.observe(tableRef.current);\n\n    return () => {\n      observer.disconnect();\n    };\n  }\n}, []);\n\n\n\nconst tableStyle = {\n  maxHeight: maxHeight ? `${maxHeight}px` : undefined,\n  minHeight: minHeight ? `${minHeight}px` : undefined,\n  overflow: 'auto'\n};const tableRef = React.useRef<HTMLDivElement>(null);\nreturn (\n  <>\n    <style dangerouslySetInnerHTML={{__html: customCss}}></style>\n    <Paper sx={paperStyle}>\n      <TableContainer ref={tableRef} style={tableStyle}>\n        <Table stickyHeader={stickyHeader} aria-label=\"sticky table\" size={size}>\n          {showHeaders && (\n            <TableHead>\n              <TableRow>\n                {showIndex && <TableCell>{/* This cell is for the index */}</TableCell>}\n                {/* Add a new table cell for the expand button */}\n                {detailColumns.length > 0 && <TableCell></TableCell>}\n                {content[0] && Object.keys(content[0]).filter((header) => !detailColumns.includes(header)).map((header, i) => (\n                  <TableCell key={i} padding={padding} dangerouslySetInnerHTML={{__html: String(header)}}></TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n          )}\n          <TableBody>\n            {currentPageContent.map((row: {[key: string]: any}, rowIndex: number) => {\n              const isExpanded = expanded.includes(rowIndex);\n              return (\n                <React.Fragment key={rowIndex}>\n                  <TableRow hover role=\"checkbox\" tabIndex={-1}>\n                    {showIndex && <TableCell>{rowIndex}</TableCell>}\n                    {detailColumns.length > 0 && (\n                      <TableCell>\n                        <IconButton\n                          onClick={(event) => {\n                            event.stopPropagation(); // Prevent the row click event from firing\n                            handleExpandClick(rowIndex);\n                          }}\n                        >\n                          {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                        </IconButton>\n                      </TableCell>\n                    )}\n                    {Object.entries(row).map(([key, value], i) => {\n                      if (!detailColumns.includes(key)) {\n                        return (\n                          <TableCell \n                            key={`${rowIndex}-${i}`} \n                            padding={padding} \n                            dangerouslySetInnerHTML={{__html: String(value)}}\n                            style={{\n                              wordWrap: \"break-word\",\n                              whiteSpace: \"normal\",\n                              overflowWrap: \"break-word\",\n                            }}\n                          />\n                        );\n                      }\n                      return null;  // Return null when we don't want to render anything\n                    })}\n                  </TableRow>\n                  {detailColumns.length > 0 && (\n                    <TableRow>\n                      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                        <Collapse in={isExpanded} timeout=\"auto\" unmountOnExit>\n                          <Box margin={1}>\n                          <Typography variant=\"h6\" gutterBottom component=\"div\" dangerouslySetInnerHTML={{__html: String(detailsHeader)}}></Typography>\n                            <Table size=\"small\" aria-label=\"purchases\">\n                            <TableBody>\n                            {chunkArray(detailColumns as string[], detailColNum).map((chunk: string[], i) => (\n                              <TableRow key={i}>\n                                {chunk.map((additionalColumn: string) => (\n                                  <React.Fragment key={additionalColumn}>\n                                    <TableCell dangerouslySetInnerHTML={{__html: additionalColumn}} />\n                                    <TableCell dangerouslySetInnerHTML={{__html: String(row[additionalColumn])}} />\n                                  </React.Fragment>\n                                ))}\n                              </TableRow>\n                            ))}\n                            </TableBody>\n                          </Table>\n                          </Box>\n                        </Collapse>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </React.Fragment>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {enablePagination && (\n        <TablePagination\n          rowsPerPageOptions={[...paginationSizes, { label: 'All', value: -1 }]}\n          colSpan={3}\n          count={content.length}\n          rowsPerPage={state.rowsPerPage}\n          page={state.page}\n          SelectProps={{\n            inputProps: { 'aria-label': 'rows per page' },\n            native: true,\n          }}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n          component=\"div\"\n          labelRowsPerPage = {paginationLabel}\n          showFirstButton = {showFirstButtonPagination}\n          showLastButton = {showLastButtonPagination}\n        />\n      )}\n    </Paper>\n  </>\n);\n\n  };\nexport default withStreamlitConnection(TableComponent);\n","\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport TableComponent from \"./st_mui_table\"\n\n// Lots of import to define a Styletron engine and load the light theme of baseui\n\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <TableComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)"],"sourceRoot":""}